import math
import numpy as np
import matplotlib.pyplot as plt

class SOM:

    # Function here computes the winning vector by Euclidean distance
    def winner(self, weights, sample):
        distances = np.linalg.norm(weights - sample, axis=1)
        return np.argmin(distances)

    # Function here updates the winning vector
    def update(self, weights, sample, J, alpha):
        weights[J] += alpha * (sample - weights[J])
        return weights

def main():
    # Training Examples (m, n)
    T = np.array([[1, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1]])

    # Weight initialization (n, C)
    weights = np.array([[0.2, 0.6, 0.5, 0.9], [0.8, 0.4, 0.7, 0.3]])

    # Training
    ob = SOM()
    epochs = 3
    alpha = 0.5

    for epoch in range(epochs):
        for sample in T:
            # Compute winner vector
            J = ob.winner(weights, sample)

            # Update winning vector
            weights = ob.update(weights, sample, J, alpha)

    # Classify test sample
    s = np.array([0, 0, 0, 1])
    J = ob.winner(weights, s)

    print("Test Sample s belongs to Cluster:", J)
    print("Trained weights:", weights)

    # Visualize the SOM weights
    fig, ax = plt.subplots()
    colors = ['red', 'blue']
    for i in range(weights.shape[0]):
        ax.scatter(weights[i, 0], weights[i, 1], c=colors[i], label=f'Cluster {i}')
        for j in range(T.shape[0]):
            ax.plot([T[j, 0], weights[i, 0]], [T[j, 1], weights[i, 1]], c=colors[i], alpha=0.2)

    ax.scatter(s[0], s[1], c='green', label='Test Sample', marker='x')
    ax.legend()
    ax.set_title('SOM Weights Visualization')
    plt.show()

if __name__ == "__main__":
    main()
